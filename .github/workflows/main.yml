
name: Continuous Integration and Deployment Pipeline

on:
  push:
    branches:
      - master
  workflow_call:

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Run code linting
        run: |
          # Add your linting commands here

  format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Install formatting tools
        run: |
          # Add commands to install formatting tools if needed
      - name: Run code formatting
        run: |
          # Add your formatting commands here

  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: username
          POSTGRES_PASSWORD: password
          POSTGRES_DB: database_name
        ports:
          - 5432:5432
      redis:
        image: redis:latest
        ports:
          - 6379:6379
      mailhog:
        image: mailhog/mailhog:latest
        ports:
          - 1025:1025
          - 8025:8025
      mockserver:
        image: mockserver/mockserver:latest
        env:
          MOCKSERVER_LOG_LEVEL: DEBUG
          SERVER_PORT: 8026
        ports:
          - 8026:8026
    env:
      APP_PROFILE: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-all-crates: true
          save-if: ${{ github.ref == 'refs/heads/master' }}

      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true

      - name: Migrate database
        run: |
          ./scripts/init_db.sh

      - name: Add mockserver expectations
        run: |
          ./scripts/init_mockserver.sh

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test

  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Build project
        run: |
          # Add commands to build your project

  deploy:
    needs: [lint, format, test, build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Rust Cache
        uses: Swatinem/rust-cache@v2
        with:
          cache-all-crates: true
          save-if: ${{ github.ref == 'refs/heads/master' }}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/madeirareport-api:latest

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      - name: Copy docker/prod to droplet
        uses: appleboy/scp-action@master
        with:
          source: 'manifests/*'
          target: '~'
          host: ${{ vars.DROPLET_HOST }}
          port: 22
          username: ${{ vars.DROPLET_USER }}
          key: ${{ secrets.DROPLET_PRIVATE_KEY }}
          debug: true
          overwrite: true
          timeout: 120s


      #      - name: Transfer files via SCP
      #        shell: bash
      #        run: |
      #          echo $DROPLET_KEY | base64 -d > ssh_private_key.pem
      #          chmod 600 ssh_private_key.pem
      #          mkdir -p ~/.ssh
      #          touch ~/.ssh/known_hosts
      #          ssh-keyscan -H -t rsa $HOST > ~/.ssh/known_hosts
      #          scp -i ssh_private_key.pem -r docker/prod/docker-compose.yml $USER@$HOST:~
      #        env:
      #          DROPLET_KEY: ${{ secrets.DROPLET_PRIVATE_KEY }}
      #          HOST: ${{ vars.DROPLET_HOST }}
      #          USER: ${{ vars.DROPLET_USER }}

      - name: Deploy
        uses: appleboy/ssh-action@master
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          USER: ${{ github.repository_owner }}
        with:
          host: ${{ vars.DROPLET_HOST }}
          username: ${{ vars.DROPLET_USER }}
          key: ${{ secrets.DROPLET_PRIVATE_KEY }}
          envs: GH_TOKEN,USER
          port: 22
          script: |
            kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.13.4/cert-manager.yaml
            
            echo "Login to ghcr.io..."
            if kubectl get secret ghcr-secret -n default 2>/dev/null; then
              echo "Secret already exists."
            else
              kubectl create secret docker-registry ghcr-secret \
              --docker-server=ghcr.io \
              --docker-username=$USER \
              --docker-password=$GH_TOKEN \
              --docker-email=leo@13dev.pt
            fi
            kubectl apply --recursive -f ~/manifests
            

#  test-coverage:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4
#      # Cache dependencies
#      - name: Cache dependencies
#        uses: actions/cache@v2
#        with:
#          path: |
#            ~/.cargo/bin/
#            ~/.cargo/registry/index/
#            ~/.cargo/registry/cache/
#            ~/.cargo/git/db/
#            target/
#          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
#          restore-keys: ${{ runner.os }}-cargo-
#      - name: Install nightly toolchain
#        uses: actions-rs/toolchain@v1
#        with:
#          toolchain: nightly
#          override: true
#      - name: Install tarpaulin
#        if: ${{ steps.cache-tarpaulin.outputs.cache-hit != 'true' }}
#        continue-on-error: true
#        uses: actions-rs/cargo@v1
#        with:
#          command: install
#          args: >
#            cargo-tarpaulin
#      - name: Migrate database
#        run: |
#          ./scripts/init_db.sh
#      - name: Add mockserver expectations
#        run: |
#          ./scripts/init_mockserver.sh
#      - name: Generate code coverage
#        run: |
#          cargo +nightly tarpaulin --verbose --all-features --workspace --timeout 120 --out Xml
#      - name: Upload to codecov.io
#        uses: codecov/codecov-action@v3
#        with:
#          fail_ci_if_error: true

#  security-checker:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout repository
#        uses: actions/checkout@v4
#      # Cache dependencies
#      - name: Cache dependencies
#        uses: actions/cache@v2
#        with:
#          path: |
#            ~/.cargo/bin/
#            ~/.cargo/registry/index/
#            ~/.cargo/registry/cache/
#            ~/.cargo/git/db/
#            target/
#          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
#          restore-keys: ${{ runner.os }}-cargo-
#      - name: Install dependencies
#        run: |
#          # Add commands to install dependencies if needed
#      - name: Run security audit
#        uses: actions-rs/audit-check@v1
#        with:
#          token: ${{ secrets.GITHUB_TOKEN }}

  spell-checker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      # Cache dependencies
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - name: Run spell checker
        uses: crate-ci/typos@master